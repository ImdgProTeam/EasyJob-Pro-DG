<local:CommonDataGridUserControl 
            x:Class="EasyJob_ProDG.UI.View.User_Controls.DataGridContainers"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:EasyJob_ProDG.UI.View.User_Controls"
             xmlns:ap="clr-namespace:EasyJob_ProDG.UI.View.AttachedProperties"
             xmlns:cc="clr-namespace:CustomControlLib;assembly=CustomControlLib"
             xmlns:behavior="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:behaviors="clr-namespace:EasyJob_ProDG.UI.Behaviors"
             xmlns:converters="clr-namespace:EasyJob_ProDG.UI.View.Converters" xmlns:sort="clr-namespace:EasyJob_ProDG.UI.View.Sort"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             >

    <local:CommonDataGridUserControl.Resources>
        <converters:VisibilityToInverseBooleanConverter x:Key="VisibilityToInverseBooleanConverter" />
        <converters:BoolInversionConverter x:Key="BoolInversionConverter" />
        <sort:EmptyTextLastSortComparer x:Key="EmptyTextLastSorter" />
    </local:CommonDataGridUserControl.Resources>

    <DockPanel>
        <StackPanel DockPanel.Dock="Top">
            <cc:SearchBox Text="{Binding TextToFilter}"/>
        </StackPanel>

        <Grid DockPanel.Dock="Bottom"
                    HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="80"/>
                <ColumnDefinition />
                <ColumnDefinition Width="110"/>
                <ColumnDefinition Width="110"/>
            </Grid.ColumnDefinitions>
            <Label Name="lblSelectionStatus"
                   Content="Selected: "
                   HorizontalAlignment="Right"
                   />
            <TextBlock Text="{Binding StatusBarText, Mode=OneWay}"
                       HorizontalAlignment="Stretch"
                       TextAlignment="Left"
                       VerticalAlignment="Center"
                       Grid.Column="1"
                       />
            <Button Content="Add Dg"
                    Command="{Binding AddNewDgCommand}"
                    Width="100"
                    Margin="1" 
                    Grid.Column="2"/>

            <Button Content="Add"
                    Command="{Binding DisplayAddUnitMenuCommand}"
                    Width="100"
                    Margin="1" 
                    Grid.Column="3"/>
        </Grid>

        <local:AddContainerToDataGrid IsAddDg="False"
                                      Title="Add Container |"
                                      Visibility="{Binding MenuVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      ContainerNumber="{Binding UnitToAddNumber, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      Location="{Binding UnitToAddLocation, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      CanUserAdd="{Binding CanUserAddUnit, UpdateSourceTrigger=PropertyChanged}"
                                      DockPanel.Dock="Bottom">
            <behavior:Interaction.Triggers>
                <behavior:EventTrigger EventName="AddItem">
                    <behavior:InvokeCommandAction Command="{Binding AddNewUnitCommand}"/>
                </behavior:EventTrigger>
            </behavior:Interaction.Triggers>
        </local:AddContainerToDataGrid>

        <DataGrid x:Name="MainContainerDataTable"
                  ItemsSource="{Binding UnitsPlanView}"
                  SelectedItem="{Binding SelectedUnit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  IsSynchronizedWithCurrentItem="True"
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  
                  FrozenColumnCount="0"
                  ScrollViewer.CanContentScroll="True"
                  ScrollViewer.IsDeferredScrollingEnabled="False"                 
                  HorizontalScrollBarVisibility="Auto"
                  VerticalScrollBarVisibility="Auto"
                  EnableRowVirtualization="True"
                  VirtualizingPanel.IsContainerVirtualizable="True"
                  VirtualizingPanel.IsVirtualizing="True"
                  VirtualizingPanel.ScrollUnit="Item"
                  VirtualizingPanel.VirtualizationMode="Recycling"
                  
                  HeadersVisibility="All"
                  GridLinesVisibility="None"
                  AlternationCount="2"
                  Background="{StaticResource Brush.ContainerTable.Background}"
                  RowBackground="Transparent"
                  AlternatingRowBackground="{StaticResource Brush.DgTable.AlternateRow}"
                  Opacity="1"
                  Grid.Column="0"
                  Grid.Row="0"
                  SelectionMode="Extended"
                  Sorting="MainDataTable_Sorting"
                  ap:SelectingContainerDataGridItem.SelectingItem="{Binding SelectedUnit}"
                  UnloadingRow="MainDataTable_OnUnloadingRow"
                  PreviewKeyDown="MainDataTable_PreviewKeyDown"
                                    BeginningEdit="MainTable_BeginningEdit"
                  CellEditEnding="MainTable_CellEditEnding"
                  behaviors:DataGridBehavior.DisplayRowNumber="True" 
                  ap:DataGridSortBehavior.AllowCustomSort="True">

            <DataGrid.Resources>

                <!-- Context menu -->
                <ContextMenu x:Key="DataGridContainersColumnHeaderContextMenu"
                                    DataContext="{Binding Path=PlacementTarget, RelativeSource={RelativeSource Self}}"
                                    ItemsSource="{Binding Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}">
                    <ContextMenu.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header"
                                        Value="{Binding Header}" />
                            <Setter Property="AutomationProperties.Name"
                                        Value="{Binding Header}" />
                            <Setter Property="IsCheckable"
                                        Value="True" />
                            <Setter Property="IsChecked"
                                        Value="{Binding Visibility, Mode=TwoWay, Converter={StaticResource VisibilityToInverseBooleanConverter}}" />
                            <Style.Triggers>
                                <Trigger Property="Header"
                                                Value="N">
                                    <Setter Property="Visibility"
                                                Value="Collapsed" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.ItemContainerStyle>
                </ContextMenu>

                <!-- Header style -->
                <Style TargetType="{x:Type DataGridColumnHeader}"
                            BasedOn="{StaticResource DataGridColumnHeaderStyle}">
                    <Setter Property="ContextMenu"
                        Value="{StaticResource DataGridContainersColumnHeaderContextMenu}" />

                </Style>



                <!-- Cell style -->
                <Style TargetType="{x:Type DataGridCell}">
                    <Setter Property="IsTabStop"
                                Value="False" />
                </Style>

                <!-- TextBox style-->
                <Style TargetType="{x:Type TextBox}">
                    <!--<Setter Property="IsTabStop"
                                    Value="True" />-->
                    <Setter Property="Margin"
                                Value="50" />
                    <Setter Property="TextAlignment"
                                Value="Right" />
                </Style>

                <!-- CheckBox style -->
                <Style TargetType="{x:Type CheckBox}">
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="Focusable" Value="False"/>
                </Style>

                <!-- Selection color -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                                 Color="{StaticResource Color.DgTable.HighlightRow}" />

            </DataGrid.Resources>


            <!-- Columns -->
            <DataGrid.Columns>

                <!-- LOCATION -->
                <DataGridTextColumn x:Name="positionColumn"
                                    Binding="{Binding Location, UpdateSourceTrigger=LostFocus}"
                                    Header="Position"
                                    CanUserSort="True"
                                    SortMemberPath="LocationSortable">
                    <DataGridTextColumn.ElementStyle>
                        <Style>
                            <!--<Setter Property="TextBox.TextAlignment"
                                            Value="Right"/>
                            <Setter Property="TextBox.Margin"
                                    Value="5"></Setter>-->
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <!-- CONTAINER NUMBER -->
                <DataGridTextColumn x:Name="numberColumn"
                                    Binding="{Binding DisplayContainerNumber, UpdateSourceTrigger=LostFocus}"
                                    Header="Container number"
                                    MinWidth="100" />

                <!-- Carrier -->
                <DataGridTextColumn x:Name="carrierColumn"
                                    Binding="{Binding Carrier, UpdateSourceTrigger=LostFocus}"
                                    Header="Operator" />

                <!-- POL -->
                <DataGridTextColumn x:Name="polColumn"
                                    Binding="{Binding POL, UpdateSourceTrigger=LostFocus}"
                                    Header="POL" />

                <!-- POD -->
                <DataGridTextColumn x:Name="podColumn"
                                    Binding="{Binding POD, UpdateSourceTrigger=LostFocus}"
                                    Header="POD" />

                <!-- Final destination -->
                <DataGridTextColumn x:Name="finalDestinationColumn"
                                    Binding="{Binding FinalDestination, UpdateSourceTrigger=LostFocus}"
                                    Header="Final destination" 
                                    ap:DataGridSortBehavior.CustomSorter="{StaticResource EmptyTextLastSorter}"
                                    />

                <!-- Contains Dg cargo -->
                <DataGridTemplateColumn x:Name="containsDgColumn"
                                        Header="Contains Dg cargo"
                                        CanUserSort="True"
                                        SortMemberPath="ContainsDgCargo"
                                        IsReadOnly="True">

                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=ContainsDgCargo, Mode=OneWay}"
                                      IsEnabled="False" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- Dg count in container -->
                <DataGridTextColumn x:Name="dgCountColumn"
                                    Binding="{Binding DgCountInContainer, Mode=OneWay}"
                                    Header="Dg count in container" 
                                    IsReadOnly="True"/>

                <!-- Type -->
                <DataGridTextColumn x:Name="containerTypeColumn"
                                    Binding="{Binding ContainerType, UpdateSourceTrigger=LostFocus}"
                                    Header="Container type">

                    <DataGridTextColumn.ElementStyle>
                        <Style>
                            <Style.Triggers>
                                <Trigger Property="Validation.HasError"
                                         Value="True">
                                    <Setter Property="TextBlock.Background"
                                            Value="Red" />
                                    <Setter Property="TextBlock.ToolTip"
                                            Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <!-- isOPEN -->
                <DataGridTemplateColumn x:Name="openColumn"
                                        Header="Open type"
                                        CanUserSort="True"
                                        SortMemberPath="IsOpen">

                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=IsOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- isRf -->
                <DataGridTemplateColumn x:Name="rfColumn"
                                        Header="Is reefer"
                                        CanUserSort="True"
                                        SortMemberPath="IsRf">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=IsRf, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- CargoHoldNumber -->
                <DataGridTextColumn x:Name="cargoHoldColumn"
                                    Binding="{Binding HoldNr, Mode=OneWay}"
                                    IsReadOnly="True"
                                    Header="Hold number">

                </DataGridTextColumn>

                <!-- isLocked -->
                <DataGridTemplateColumn x:Name="isLockedColumn"
                                        Header="Is Locked"
                                        CanUserSort="True"
                                        SortMemberPath="IsPositionLockedForChange">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox 
                                IsChecked="{Binding Path=IsPositionLockedForChange, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                IsEnabled="{Binding Path=HasNoNumber, Converter={StaticResource BoolInversionConverter}, UpdateSourceTrigger=PropertyChanged}"
                                />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- isToBeKeptInPlan -->
                <DataGridTemplateColumn x:Name="isToBeKept"
                                        Header="To be kept in plan"
                                        CanUserSort="True"
                                        SortMemberPath="IsToBeKeptInPlan">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox 
                                IsChecked="{Binding Path=IsToBeKeptInPlan, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                IsEnabled="{Binding Path=HasNoNumber, Converter={StaticResource BoolInversionConverter}, UpdateSourceTrigger=PropertyChanged}"
                                />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- isToImport -->
                <DataGridTemplateColumn x:Name="isToBeImportedColumn"
                                        Header="Import"
                                        CanUserSort="True"
                                        SortMemberPath="IsToImport">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=IsToImport, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      IsEnabled="{Binding Path=HasNoNumber, Converter={StaticResource BoolInversionConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- isNotToImport -->
                <DataGridTemplateColumn x:Name="isNotToBeImportedColumn"
                                        Header="Not to import"
                                        CanUserSort="True"
                                        SortMemberPath="IsNotToImport">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox 
                                IsChecked="{Binding Path=IsNotToImport, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                IsEnabled="{Binding Path=HasNoNumber, Converter={StaticResource BoolInversionConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- HasLocationChanged -->
                <DataGridTemplateColumn x:Name="locationChangedColumn"
                                        Header="Location changed"
                                        IsReadOnly="True"
                                        CanUserSort="True"
                                        SortMemberPath="HasLocationChanged">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=HasLocationChanged, Mode=OneWay}"
                                      IsEnabled="False" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- Location before restow -->
                <DataGridTextColumn x:Name="positionBeforeRestowColumn"
                                    Binding="{Binding LocationBeforeRestow, Mode=OneWay}"
                                    Header="Old Position"
                                    IsReadOnly="True"
                                    ap:DataGridSortBehavior.CustomSorter="{StaticResource EmptyTextLastSorter}">
                    <DataGridTextColumn.ElementStyle>
                        <Style>
                            <Setter Property="TextBlock.TextWrapping"
                                    Value="NoWrap" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <!-- isNewUnitInPlan -->
                <DataGridTemplateColumn x:Name="newUnitColumn"
                                        Header="Is New in plan"
                                        IsReadOnly="True"
                                        CanUserSort="True"
                                        SortMemberPath="IsNewUnitInPlan">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=IsNewUnitInPlan, Mode=OneWay}"
                                      IsEnabled="False" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- HasPodChanged -->
                <DataGridTemplateColumn x:Name="hasPodChangedColumn"
                                        Header="POD changed"
                                        CanUserSort="True"
                                        SortMemberPath="HasPodChanged"
                                        IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=HasPodChanged, Mode=OneWay}"
                                      IsEnabled="False" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- HasContainerTypeChanged -->
                <DataGridTemplateColumn x:Name="hasContainerTypeChangedColumn"
                                        Header="Type changed"
                                        IsReadOnly="True"
                                        CanUserSort="True"
                                        SortMemberPath="HasContainerTypeChanged">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding HasContainerTypeChanged, Mode=OneWay}" 
                                      IsEnabled="False"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- Remarks -->
                <DataGridTextColumn x:Name="remarksColumn"
                                    Header="Remarks"
                                    FocusManager.FocusedElement="{Binding ElementName=remarksColumn}"
                                    Binding="{Binding Remarks, UpdateSourceTrigger=LostFocus, Mode=TwoWay}"
                                    ap:DataGridSortBehavior.CustomSorter="{StaticResource EmptyTextLastSorter}">
                    <DataGridTextColumn.ElementStyle>
                        <Style>
                            <Setter Property="TextBox.TextWrapping"
                                    Value="WrapWithOverflow" />
                            <Setter Property="TextBox.MaxLines"
                                    Value="2" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                    <DataGridTextColumn.EditingElementStyle>
                        <Style>
                            <Setter Property="TextBox.TextWrapping"
                                    Value="WrapWithOverflow" />
                            <Setter Property="TextBox.MaxLines"
                                    Value="3" />
                        </Style>
                    </DataGridTextColumn.EditingElementStyle>
                </DataGridTextColumn>

            </DataGrid.Columns>


            <!-- BEHAVIORS -->
            <behavior:Interaction.Triggers>
                <behavior:EventTrigger EventName="SelectionChanged">
                    <behavior:InvokeCommandAction Command="{Binding SelectionChangedCommand}" 
                                                  CommandParameter="{Binding ElementName=MainContainerDataTable, Path=SelectedItems}"/>
                </behavior:EventTrigger>
            </behavior:Interaction.Triggers>

            <!-- INPUT BINDINGS -->
            <DataGrid.InputBindings>
                <KeyBinding Key="Delete"
                            Command="{Binding DeleteUnitCommand}"
                            CommandParameter="{Binding ElementName=MainContainerDataTable, Path=SelectedItems}" />
            </DataGrid.InputBindings>
        </DataGrid>
    </DockPanel>
</local:CommonDataGridUserControl>
